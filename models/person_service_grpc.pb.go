// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package models

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PersonServiceClient is the client API for PersonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PersonServiceClient interface {
	GetPerson(ctx context.Context, in *GetPersonRequest, opts ...grpc.CallOption) (*GetPersonResponse, error)
	SavePerson(ctx context.Context, in *SavePersonRequest, opts ...grpc.CallOption) (*SavePersonResponse, error)
	GetPersonStream(ctx context.Context, in *GetPersonStreamRequest, opts ...grpc.CallOption) (PersonService_GetPersonStreamClient, error)
	UploadImage(ctx context.Context, opts ...grpc.CallOption) (PersonService_UploadImageClient, error)
}

type personServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPersonServiceClient(cc grpc.ClientConnInterface) PersonServiceClient {
	return &personServiceClient{cc}
}

func (c *personServiceClient) GetPerson(ctx context.Context, in *GetPersonRequest, opts ...grpc.CallOption) (*GetPersonResponse, error) {
	out := new(GetPersonResponse)
	err := c.cc.Invoke(ctx, "/grpcgo.rpcservice.PersonService/GetPerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) SavePerson(ctx context.Context, in *SavePersonRequest, opts ...grpc.CallOption) (*SavePersonResponse, error) {
	out := new(SavePersonResponse)
	err := c.cc.Invoke(ctx, "/grpcgo.rpcservice.PersonService/SavePerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) GetPersonStream(ctx context.Context, in *GetPersonStreamRequest, opts ...grpc.CallOption) (PersonService_GetPersonStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &PersonService_ServiceDesc.Streams[0], "/grpcgo.rpcservice.PersonService/GetPersonStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &personServiceGetPersonStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PersonService_GetPersonStreamClient interface {
	Recv() (*GetPersonStreamResponse, error)
	grpc.ClientStream
}

type personServiceGetPersonStreamClient struct {
	grpc.ClientStream
}

func (x *personServiceGetPersonStreamClient) Recv() (*GetPersonStreamResponse, error) {
	m := new(GetPersonStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *personServiceClient) UploadImage(ctx context.Context, opts ...grpc.CallOption) (PersonService_UploadImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &PersonService_ServiceDesc.Streams[1], "/grpcgo.rpcservice.PersonService/UploadImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &personServiceUploadImageClient{stream}
	return x, nil
}

type PersonService_UploadImageClient interface {
	Send(*UploadImageRequest) error
	CloseAndRecv() (*UploadImageResponse, error)
	grpc.ClientStream
}

type personServiceUploadImageClient struct {
	grpc.ClientStream
}

func (x *personServiceUploadImageClient) Send(m *UploadImageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *personServiceUploadImageClient) CloseAndRecv() (*UploadImageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadImageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PersonServiceServer is the server API for PersonService service.
// All implementations must embed UnimplementedPersonServiceServer
// for forward compatibility
type PersonServiceServer interface {
	GetPerson(context.Context, *GetPersonRequest) (*GetPersonResponse, error)
	SavePerson(context.Context, *SavePersonRequest) (*SavePersonResponse, error)
	GetPersonStream(*GetPersonStreamRequest, PersonService_GetPersonStreamServer) error
	UploadImage(PersonService_UploadImageServer) error
	mustEmbedUnimplementedPersonServiceServer()
}

// UnimplementedPersonServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPersonServiceServer struct {
}

func (UnimplementedPersonServiceServer) GetPerson(context.Context, *GetPersonRequest) (*GetPersonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPerson not implemented")
}
func (UnimplementedPersonServiceServer) SavePerson(context.Context, *SavePersonRequest) (*SavePersonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePerson not implemented")
}
func (UnimplementedPersonServiceServer) GetPersonStream(*GetPersonStreamRequest, PersonService_GetPersonStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPersonStream not implemented")
}
func (UnimplementedPersonServiceServer) UploadImage(PersonService_UploadImageServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (UnimplementedPersonServiceServer) mustEmbedUnimplementedPersonServiceServer() {}

// UnsafePersonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersonServiceServer will
// result in compilation errors.
type UnsafePersonServiceServer interface {
	mustEmbedUnimplementedPersonServiceServer()
}

func RegisterPersonServiceServer(s grpc.ServiceRegistrar, srv PersonServiceServer) {
	s.RegisterService(&PersonService_ServiceDesc, srv)
}

func _PersonService_GetPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).GetPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcgo.rpcservice.PersonService/GetPerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).GetPerson(ctx, req.(*GetPersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_SavePerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SavePersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).SavePerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcgo.rpcservice.PersonService/SavePerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).SavePerson(ctx, req.(*SavePersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_GetPersonStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPersonStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PersonServiceServer).GetPersonStream(m, &personServiceGetPersonStreamServer{stream})
}

type PersonService_GetPersonStreamServer interface {
	Send(*GetPersonStreamResponse) error
	grpc.ServerStream
}

type personServiceGetPersonStreamServer struct {
	grpc.ServerStream
}

func (x *personServiceGetPersonStreamServer) Send(m *GetPersonStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PersonService_UploadImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PersonServiceServer).UploadImage(&personServiceUploadImageServer{stream})
}

type PersonService_UploadImageServer interface {
	SendAndClose(*UploadImageResponse) error
	Recv() (*UploadImageRequest, error)
	grpc.ServerStream
}

type personServiceUploadImageServer struct {
	grpc.ServerStream
}

func (x *personServiceUploadImageServer) SendAndClose(m *UploadImageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *personServiceUploadImageServer) Recv() (*UploadImageRequest, error) {
	m := new(UploadImageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PersonService_ServiceDesc is the grpc.ServiceDesc for PersonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PersonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcgo.rpcservice.PersonService",
	HandlerType: (*PersonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPerson",
			Handler:    _PersonService_GetPerson_Handler,
		},
		{
			MethodName: "SavePerson",
			Handler:    _PersonService_SavePerson_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPersonStream",
			Handler:       _PersonService_GetPersonStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadImage",
			Handler:       _PersonService_UploadImage_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "person_service.proto",
}
